/*
 * TCSS 305 – Winter 2015
 * Assignment 5 - Tetris
 */

package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.Line2D;
import java.util.LinkedList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;

import model.Board;
import model.Board.BoardData;

/**
 * Represents a BoardDataObserver class.
 * @author Lola Howell
 * @version March 9, 2015
 */

@SuppressWarnings("serial")
public class BoardPanel extends JPanel implements Observer {

    /**
     * The color Pink.
     */
    private static final Color PINK = new Color(255, 175, 255);

    /**
     * The width of the playing board.
     */
    private static final int WIDTH = 100;

    /**
     * The height of the playing board.
     */
    private static final int HEIGHT = 200;

    /**
     * The invisible number of rows.
     */
    private static final int NOT_VISIBLE = 4;

    /**
     * The size of the block.
     */
    private static final int SIZE = 15;

    /**
     * The list of array of colors.
     */
    private List<Color[]> myRow;

    /**
     * The Tetris Board.
     */
    private final Board myBoard;

    /**
     * The boolean for the state of the grid.
     */
    private boolean myGridToggled;

    /**
     * Constructor for BoardDataObserver object.
     * 
     * @param theBoard observable Board.
     */
    public BoardPanel(final Board theBoard) {
        super();
        setBackground(PINK);
        setPreferredSize(new Dimension(WIDTH, HEIGHT));
        myRow = new LinkedList<Color[]>();
        myBoard  = theBoard;
        myGridToggled = false; 
        
    }
    
    /**
     * Draws the playing Board for Tetris, alse a grid if tiggled.
     * 
     * @param theGraphic The graphics context to use for painting.
     */
    public void paintComponent(final Graphics theGraphic) {
        super.paintComponent(theGraphic);
        final Graphics2D g2d = (Graphics2D) theGraphic;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                             RenderingHints.VALUE_ANTIALIAS_ON);
        if (myGridToggled) {
            final int height = getHeight();
            final int width = getWidth();
            g2d.setColor(Color.GRAY);
            g2d.setStroke(new BasicStroke(1));
            final Line2D.Double gridLine = new Line2D.Double();
            for (int x = 0; x < width; x++) {
                if (x % SIZE == 0) {
                    gridLine.setLine(x, 0, x, height);
                    g2d.draw(gridLine);
                }
            }
            for (int y = 0; y < height; y++) {
                if (y % SIZE == 0) {
                    gridLine.setLine(0, y, width, y);
                    g2d.draw(gridLine);
                }
            }
        }
        if (!(myRow.isEmpty())) {
            for (int r = 0; r <= myRow.size() - NOT_VISIBLE; r++) { 
                final Color[]row = myRow.get(r);
                for (int c = 0; c < row.length; c++) {
                    if (row[c] != null) {
                        g2d.setColor(row[c]);
                        g2d.fillRect(c * SIZE, (myBoard.getHeight() - r) * SIZE, SIZE, SIZE);
                    }
                }
            }
        }   
    }
    
    /**
     * Toggle the visibility of the grid.
     * 
     * @param theState is the state of the 
     * grid button checked - true, unchecked - false.
     */
    public void toggleGrid(final Boolean theState) {
        myGridToggled = theState;
        repaint();
    }

    /**
     * The update method for the Observer interface.
     * 
     * @param theBoard The observable, Board.
     * @param theList Board passes.
     */
    public void update(final Observable theBoard, final Object theList) {
        if (theList.getClass() == BoardData.class) {
            myRow = ((BoardData) theList).getBoardData();
            repaint();
        }
    }
}


